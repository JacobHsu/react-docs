{"componentChunkName":"component---src-templates-tutorial-js","path":"/debug/debug.html","result":{"data":{"markdownRemark":{"html":"<p>React Debug 筆記。</p>\n<h2 id=\"react-hook-useeffect-has-a-missing-dependency\"><a href=\"#react-hook-useeffect-has-a-missing-dependency\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>React Hook useEffect has a missing dependency:</h2>\n<p><a href=\"https://ithelp.ithome.com.tw/articles/10225504\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">在 useEffect 中使用呼叫需被覆用的函式 - useCallback 的使用</a></p>\n<blockquote>\n<p>Tip</p>\n<p>如果某個函式不需要被覆用，那麼可以直接定義在 <code class=\"gatsby-code-text\">useEffect</code> 中，但若該方法會需要被共用，則把該方法提到 useEffect 外面後，記得用 <code class=\"gatsby-code-text\">useCallback</code> 進行處理後再放到 useEffect 的 dependencies 中</p>\n</blockquote>\n<p>這個錯誤提示是由 <code class=\"gatsby-code-text\">ESLint</code> 發出的，ESLint 是用來檢查 JavaScript 程式碼中有無語法錯誤或是撰寫風格不符的工具，在這個工具中可以根據專案或團隊的需要設定不同的規則，而這裡之所以會跳出錯誤提示，是因為在 CodeSandbox 上是透過 create-react-app 這個官方工具來建立的 React 專案，因此預設會根據 React 官方的建議來安裝與設定 ESLint。</p>\n<p>這個 ESLint 的錯誤提示是由名為 react-hooks 的 ESLint Plugin 顯示，告訴我們在 useEffect 中似乎遺漏了 dependencies，它認為應該要把 fetchData 放到 useEffec 的 dependencies 的陣列中。</p>\n<p>這個錯誤提示之所以會產生，是因為先前當我們把 fetchData 定義在 useEffect 中時，React Hooks ESLint Plugin 可以很清楚的知道在 fetchData 這個函式中，並沒有相依到任何和 React 組件有關的資料狀態（即，state 或 props），因此允許我們在 dependencies 陣列中不帶入任何元素。</p>\n<p>但是當我們把 fetchData 搬到 useEffect 外之後，React Hooks ESLint Plugin 不確定 fetchData 中是否有使用到 React 內部的資料狀態（即，state 或 props），如果 fetchData 有相依到 state 或 props 但在 dependencies 中卻沒把相依的資料放入陣列時，就可能使得 fetchData 沒辦法適時的重新被呼叫到而產生問題，因此 React Hooks ESLint Plugin 才會建議我們把 fetchData 放到 dependencies 中。</p>\n<p>useEffect 內函式被呼叫的原則是：</p>\n<blockquote>\n<p>「組件渲染完後，如果 dependencies 有改變，才會呼叫 useEffect 內的 function」</p>\n</blockquote>\n<p>每一次 Function Component 被呼叫時，都會再定義一次新的 fetchData（但函式的內容都相同），因此雖然對我們來說，因為 fetchData 內做的事是一樣，所以我們覺得它是相同的；但對 useEffect 的 dependencies 來說每次的 fetchData 卻都是不同的，而這也就是為什為會導致無窮迴圈的緣故</p>\n<h2 id=\"避免-useeffect-內的函式不斷執行---usecallback-的使用\"><a href=\"#%E9%81%BF%E5%85%8D-useeffect-%E5%85%A7%E7%9A%84%E5%87%BD%E5%BC%8F%E4%B8%8D%E6%96%B7%E5%9F%B7%E8%A1%8C---usecallback-%E7%9A%84%E4%BD%BF%E7%94%A8\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>避免 useEffect 內的函式不斷執行 - useCallback 的使用</h2>\n<p>在 React Hooks 則提供了 useCallback 這樣的方法，在有需要時，它可以幫我們把這個函式保存下來，讓它不會隨著每次組件重新執行後，因為作用域不同而得到兩個不同的函式。</p>\n<p><a href=\"https://reactjs.org/docs/hooks-reference.html#usecallback\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">useCallback</a></p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"gatsby-code-jsx\"><code class=\"gatsby-code-jsx\"><span class=\"token keyword\">const</span> memoizedCallback <span class=\"token operator\">=</span> <span class=\"token function\">useCallback</span><span class=\"token punctuation\">(</span>\n  <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">doSomething</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">[</span>a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"gatsby-code-jsx\"><code class=\"gatsby-code-jsx\"> <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">fetchData</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>currentWeather<span class=\"token punctuation\">,</span> weatherForecast<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> Promise<span class=\"token punctuation\">.</span><span class=\"token function\">all</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>\n      <span class=\"token function\">fetchCurrentWeather</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n      <span class=\"token function\">fetchWeatherForecast</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token function\">setWeatherElement</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n      <span class=\"token operator\">...</span>currentWeather<span class=\"token punctuation\">,</span>\n      <span class=\"token operator\">...</span>weatherForecast<span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"gatsby-code-jsx\"><code class=\"gatsby-code-jsx\"><span class=\"token comment\">// STEP 1：從 react 中載入 useCallback</span>\n<span class=\"token keyword\">import</span> React<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> useState<span class=\"token punctuation\">,</span> useEffect<span class=\"token punctuation\">,</span> useCallback <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'react'</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// STEP 2：使用 useCallback 並將回傳的函式取名為 fetchData</span>\n  <span class=\"token keyword\">const</span> fetchData <span class=\"token operator\">=</span> <span class=\"token function\">useCallback</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// STEP 3：把原本的 fetchData 改名為 fetchingData 放到 useCallback 的函式內</span>\n    <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">fetchingData</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>currentWeather<span class=\"token punctuation\">,</span> weatherForecast<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> Promise<span class=\"token punctuation\">.</span><span class=\"token function\">all</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>\n        <span class=\"token function\">fetchCurrentWeather</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n        <span class=\"token function\">fetchWeatherForecast</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n      <span class=\"token function\">setWeatherElement</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n        <span class=\"token operator\">...</span>currentWeather<span class=\"token punctuation\">,</span>\n        <span class=\"token operator\">...</span>weatherForecast<span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// STEP 4：記得要呼叫 fetchingData 這個方法</span>\n    <span class=\"token function\">fetchingData</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// STEP 5：因為 fetchingData 沒有相依到 React 組件中的資料狀態，所以 dependencies 陣列中不帶入元素</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token function\">useEffect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'execute function in useEffect'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token function\">fetchData</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// STEP 6：把透過 useCallback 回傳的函式放到 useEffect 的 dependencies 中</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>fetchData<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>","frontmatter":{"title":"除錯指南","next":null,"prev":null},"fields":{"path":"content/debug/debug.md","slug":"debug/debug.html"}}},"pageContext":{"slug":"debug/debug.html"}},"staticQueryHashes":[]}