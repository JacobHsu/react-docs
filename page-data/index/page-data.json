{"componentChunkName":"component---src-pages-index-js","path":"/","result":{"data":{"codeExamples":{"edges":[{"node":{"id":"a-component-using-external-plugins","code":"class MarkdownEditor extends React.Component {\n  constructor(props) {\n    super(props);\n    this.md = new Remarkable();\n    this.handleChange = this.handleChange.bind(this);\n    this.state = { value: 'Hello, **world**!' };\n  }\n\n  handleChange(e) {\n    this.setState({ value: e.target.value });\n  }\n\n  getRawMarkup() {\n    return { __html: this.md.render(this.state.value) };\n  }\n\n  render() {\n    return (\n      <div className=\"MarkdownEditor\">\n        <h3>Input</h3>\n        <label htmlFor=\"markdown-content\">\n          Enter some markdown\n        </label>\n        <textarea\n          id=\"markdown-content\"\n          onChange={this.handleChange}\n          defaultValue={this.state.value}\n        />\n        <h3>Output</h3>\n        <div\n          className=\"content\"\n          dangerouslySetInnerHTML={this.getRawMarkup()}\n        />\n      </div>\n    );\n  }\n}\n\nReactDOM.render(\n  <MarkdownEditor />,\n  document.getElementById('markdown-example')\n);\n","mdAbsolutePath":"/home/runner/work/react-docs/react-docs/content/home/examples/a-component-using-external-plugins.md"}},{"node":{"id":"a-simple-component","code":"class HelloMessage extends React.Component {\n  render() {\n    return (\n      <div>\n        Hello {this.props.name}\n      </div>\n    );\n  }\n}\n\nReactDOM.render(\n  <HelloMessage name=\"Taylor\" />,\n  document.getElementById('hello-example')\n);","mdAbsolutePath":"/home/runner/work/react-docs/react-docs/content/home/examples/a-simple-component.md"}},{"node":{"id":"a-stateful-component","code":"class Timer extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = { seconds: 0 };\n  }\n\n  tick() {\n    this.setState(state => ({\n      seconds: state.seconds + 1\n    }));\n  }\n\n  componentDidMount() {\n    this.interval = setInterval(() => this.tick(), 1000);\n  }\n\n  componentWillUnmount() {\n    clearInterval(this.interval);\n  }\n\n  render() {\n    return (\n      <div>\n        Seconds: {this.state.seconds}\n      </div>\n    );\n  }\n}\n\nReactDOM.render(\n  <Timer />,\n  document.getElementById('timer-example')\n);","mdAbsolutePath":"/home/runner/work/react-docs/react-docs/content/home/examples/a-stateful-component.md"}},{"node":{"id":"an-application","code":"class TodoApp extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = { items: [], text: '' };\n    this.handleChange = this.handleChange.bind(this);\n    this.handleSubmit = this.handleSubmit.bind(this);\n  }\n\n  render() {\n    return (\n      <div>\n        <h3>TODO</h3>\n        <TodoList items={this.state.items} />\n        <form onSubmit={this.handleSubmit}>\n          <label htmlFor=\"new-todo\">\n            What needs to be done?\n          </label>\n          <input\n            id=\"new-todo\"\n            onChange={this.handleChange}\n            value={this.state.text}\n          />\n          <button>\n            Add #{this.state.items.length + 1}\n          </button>\n        </form>\n      </div>\n    );\n  }\n\n  handleChange(e) {\n    this.setState({ text: e.target.value });\n  }\n\n  handleSubmit(e) {\n    e.preventDefault();\n    if (this.state.text.length === 0) {\n      return;\n    }\n    const newItem = {\n      text: this.state.text,\n      id: Date.now()\n    };\n    this.setState(state => ({\n      items: state.items.concat(newItem),\n      text: ''\n    }));\n  }\n}\n\nclass TodoList extends React.Component {\n  render() {\n    return (\n      <ul>\n        {this.props.items.map(item => (\n          <li key={item.id}>{item.text}</li>\n        ))}\n      </ul>\n    );\n  }\n}\n\nReactDOM.render(\n  <TodoApp />,\n  document.getElementById('todos-example')\n);\n","mdAbsolutePath":"/home/runner/work/react-docs/react-docs/content/home/examples/an-application.md"}}]},"examples":{"edges":[{"node":{"fileAbsolutePath":"/home/runner/work/react-docs/react-docs/content/home/examples/a-simple-component.md","fields":{"slug":"/home/examples/a-simple-component.html"},"frontmatter":{"title":"簡單的 Component","domid":"hello-example"},"html":"<p>React component 需要實做 <code class=\"gatsby-code-text\">render()</code> function，這個 function 接受輸入的資料並回傳需要顯示的內容。這個範例使用了 JSX，一個類似 XML 的語法。傳入給元件的輸入資料可以透過 <code class=\"gatsby-code-text\">this.props</code> 在 <code class=\"gatsby-code-text\">render()</code> function 中存取。</p>\n<p><strong>使用 React 並不一定要使用 JSX。</strong> 試試看 <a href=\"https://babeljs.io/repl/#?presets=react&code_lz=MYewdgzgLgBApgGzgWzmWBeGAeAFgRgD4AJRBEAGhgHcQAnBAEwEJsB6AwgbgChRJY_KAEMAlmDh0YWRiGABXVOgB0AczhQAokiVQAQgE8AkowAUAcjogQUcwEpeAJTjDgUACIB5ALLK6aRklTRBQ0KCohMQk6Bx4gA\" target=\"_blank\" rel=\"noreferrer\">Babel REPL</a> 來了解由 JSX 編譯步驟產生的原始 JavaScript 程式碼。</p>"}},{"node":{"fileAbsolutePath":"/home/runner/work/react-docs/react-docs/content/home/examples/a-stateful-component.md","fields":{"slug":"/home/examples/a-stateful-component.html"},"frontmatter":{"title":"Stateful Component","domid":"timer-example"},"html":"<p>除了接受輸入資料外（透過 <code class=\"gatsby-code-text\">this.props</code> 存取），一個 Component 也可以保存自身的 state（透過 <code class=\"gatsby-code-text\">this.state</code> 存取）。當一個 component 的 state 改變的時候，產生的標記語法將會透過自動重新呼叫 <code class=\"gatsby-code-text\">render()</code> 更新。</p>"}},{"node":{"fileAbsolutePath":"/home/runner/work/react-docs/react-docs/content/home/examples/an-application.md","fields":{"slug":"/home/examples/an-application.html"},"frontmatter":{"title":"一個應用程式","domid":"todos-example"},"html":"<p>透過靈活運用 <code class=\"gatsby-code-text\">props</code> 跟 <code class=\"gatsby-code-text\">state</code>，我們可以寫一個很簡易的待辦事項的應用程式。這個範例使用 <code class=\"gatsby-code-text\">state</code> 保存目前所有的待辦事項以及使用者目前輸入的文字。雖然這些 event handler 像是直接寫在程式碼中，實際上 React 內部會自動收集他們並透過 event delegation 實做。</p>"}},{"node":{"fileAbsolutePath":"/home/runner/work/react-docs/react-docs/content/home/examples/a-component-using-external-plugins.md","fields":{"slug":"/home/examples/a-component-using-external-plugins.html"},"frontmatter":{"title":"使用外部程式的 Component","domid":"markdown-example"},"html":"<p>React component 可以靈活的運用其他的函式庫和框架。這個範例使用了 <strong>remarkable</strong>，一個外部的 Markdown 函式庫來即時處理 <code class=\"gatsby-code-text\">&lt;textarea></code> 的內容。</p>"}}]},"marketing":{"edges":[{"node":{"frontmatter":{"title":"宣告式"},"html":"<p>React 讓實作互動式的使用者介面變得一點也不痛苦。你只要在你的應用程式中為每個情境設計一個簡單的 view，React 就會在資料變更時有效率的自動更新並 render 有異動的元件。</p>\n<p>宣告式的 view 讓你更容易預測你的程式的行為，同時也較為容易除錯。</p>"}},{"node":{"frontmatter":{"title":"元件式開發"},"html":"<p>首先實作一個擁有 state 的獨立 component，然後組合他們建立複雜的使用者介面。</p>\n<p>因為 component 的邏輯是用 JavaScript 寫的而不是使用其他樣板語言，你可以輕鬆的在你的程式中傳遞複雜的資料而不需將其藏在 DOM 之中。</p>"}},{"node":{"frontmatter":{"title":"學習一次，四處可通"},"html":"<p>我們並不強制要求你使用特定的架構，所以你可以在 React 中開發新的功能而不需要重寫原有的程式碼。</p>\n<p>React 也可以透過 Node 在伺服器上預先執行，甚至也能透過 <a href=\"https://reactnative.dev/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">React Native</a> 使用在手機應用程式中。</p>"}}]}},"pageContext":{}},"staticQueryHashes":[]}