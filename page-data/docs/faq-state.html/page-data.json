{"componentChunkName":"component---src-templates-docs-js","path":"/docs/faq-state.html","result":{"data":{"markdownRemark":{"html":"<h3 id=\"what-does-setstate-do\"><a href=\"#what-does-setstate-do\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><code class=\"gatsby-code-text\">setState</code> 的作用？ </h3>\n<p><code class=\"gatsby-code-text\">setState()</code> 安排對 component <code class=\"gatsby-code-text\">state</code> object 的更新。當 state 改變時，component 會藉由重新 render 來回應。</p>\n<h3 id=\"what-is-the-difference-between-state-and-props\"><a href=\"#what-is-the-difference-between-state-and-props\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><code class=\"gatsby-code-text\">state</code> 和 <code class=\"gatsby-code-text\">props</code> 有什麼不同？ </h3>\n<p><a href=\"/docs/components-and-props.html\"><code class=\"gatsby-code-text\">props</code></a>（「properties」的簡寫）和 <a href=\"/docs/state-and-lifecycle.html\"><code class=\"gatsby-code-text\">state</code></a> 都是純 JavaScript object。雖然兩者都擁有會影響 render 輸出的資訊，但在一個重要方向上有所不同：<code class=\"gatsby-code-text\">props</code> 是被傳遞<em>進</em> component（類似於 function 的參數），而 <code class=\"gatsby-code-text\">state</code> 是在 component <em>內部</em>被管理（類似於在 function 中宣告中的變數）。</p>\n<p>這裡有一些很棒的資源，可以進一步閱讀來了解使用 <code class=\"gatsby-code-text\">props</code> 和 <code class=\"gatsby-code-text\">state</code> 的時機：</p>\n<ul>\n<li><a href=\"https://github.com/uberVU/react-guide/blob/master/props-vs-state.md\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Props vs State</a></li>\n<li><a href=\"https://lucybain.com/blog/2016/react-state-vs-pros/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">ReactJS: Props vs. State</a></li>\n</ul>\n<h3 id=\"why-is-setstate-giving-me-the-wrong-value\"><a href=\"#why-is-setstate-giving-me-the-wrong-value\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>為什麼 <code class=\"gatsby-code-text\">setState</code> 會出現錯誤的值？ </h3>\n<p>在 React，<code class=\"gatsby-code-text\">this.props</code> 和 <code class=\"gatsby-code-text\">this.state</code> 都代表該 <em>render</em> 的值。也就是目前螢幕上的內容。</p>\n<p>呼叫 <code class=\"gatsby-code-text\">setState</code> 是非同步的 — 不要在呼叫 <code class=\"gatsby-code-text\">setState</code> 後立即依賴 <code class=\"gatsby-code-text\">this.state</code> 去反映新的值。如果需要基於目前 state 來計算值，請傳遞一個更新用的 function 而不是 object（細節請看下方）。</p>\n<p><em>不會</em>符合預期結果的程式碼範例：</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"gatsby-code-jsx\"><code class=\"gatsby-code-jsx\"><span class=\"token function\">incrementCount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// Note: this will *not* work as intended.</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">setState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>count<span class=\"token operator\">:</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">.</span>count <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token function\">handleSomething</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// Let's say `this.state.count` starts at 0.</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">incrementCount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">incrementCount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">incrementCount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">// When React re-renders the component, `this.state.count` will be 1, but you expected 3.</span>\n\n  <span class=\"token comment\">// This is because `incrementCount()` function above reads from `this.state.count`,</span>\n  <span class=\"token comment\">// but React doesn't update `this.state.count` until the component is re-rendered.</span>\n  <span class=\"token comment\">// So `incrementCount()` ends up reading `this.state.count` as 0 every time, and sets it to 1.</span>\n\n  <span class=\"token comment\">// The fix is described below!</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>關於如何修正此問題的資訊請參考下方。</p>\n<h3 id=\"how-do-i-update-state-with-values-that-depend-on-the-current-state\"><a href=\"#how-do-i-update-state-with-values-that-depend-on-the-current-state\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>如何使用目前 state 的值來更新 state？ </h3>\n<p>將一個 function 而非 object 傳遞給 <code class=\"gatsby-code-text\">setState</code>，來確保呼叫時始終是使用最新版本的 state（請看下方）。</p>\n<h3 id=\"what-is-the-difference-between-passing-an-object-or-a-function-in-setstate\"><a href=\"#what-is-the-difference-between-passing-an-object-or-a-function-in-setstate\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>在 <code class=\"gatsby-code-text\">setState</code> 中傳遞 object 或 function 有何不同？ </h3>\n<p>傳遞一個更新用的 function 允許你在 updater 內存取目前 state 的值。由於 <code class=\"gatsby-code-text\">setState</code> 是批次處理呼叫的，這讓你能夠鏈結更新並確保它們依序建立而不會產生衝突：</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"gatsby-code-jsx\"><code class=\"gatsby-code-jsx\"><span class=\"token function\">incrementCount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">setState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">state</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// Important: read `state` instead of `this.state` when updating.</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>count<span class=\"token operator\">:</span> state<span class=\"token punctuation\">.</span>count <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token function\">handleSomething</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// Let's say `this.state.count` starts at 0.</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">incrementCount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">incrementCount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">incrementCount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// If you read `this.state.count` now, it would still be 0.</span>\n  <span class=\"token comment\">// But when React re-renders the component, it will be 3.</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><a href=\"/docs/react-component.html#setstate\">學習更多關於 setState</a></p>\n<h3 id=\"when-is-setstate-asynchronous\"><a href=\"#when-is-setstate-asynchronous\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><code class=\"gatsby-code-text\">setState</code> 何時是非同步？ </h3>\n<p>目前 <code class=\"gatsby-code-text\">setState</code> 在 event handler 中是非同步。</p>\n<p>這會確保 <code class=\"gatsby-code-text\">Child</code> 不會重新 render 兩次，像是 <code class=\"gatsby-code-text\">Parent</code> 和 <code class=\"gatsby-code-text\">Child</code> 在一個單次 click 事件中同時呼叫 <code class=\"gatsby-code-text\">setState</code> 的例子。取而代之，React 會在瀏覽器事件結束時「刷新」state 的更新。這在大型應用程式中能產生顯著的效能提升。</p>\n<p>這是一個實作細節所以請避免直接依懶它。未來的版本中，React 將在更多情況下預設批次處理更新。</p>\n<h3 id=\"why-doesnt-react-update-thisstate-synchronously\"><a href=\"#why-doesnt-react-update-thisstate-synchronously\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>為什麼 React 不同步地更新 <code class=\"gatsby-code-text\">this.state</code>？ </h3>\n<p>如同在前面篇幅解釋的，在開始重新 render 前，React 意圖「等待」直到所有的 component 都在其 event handler 中呼叫 <code class=\"gatsby-code-text\">setState()</code>。藉由避免不必要的重新 render 來增加效能。</p>\n<p>不過，你也許仍想知道，為什麼 React 不在不重新 render 的情況下立即更新 <code class=\"gatsby-code-text\">this.state</code> 就好。</p>\n<p>有 2 個主要原因：</p>\n<ul>\n<li>這會破壞 <code class=\"gatsby-code-text\">props</code> 和 <code class=\"gatsby-code-text\">state</code> 間的一致性，造成難以除錯的問題。</li>\n<li>這會造成我們正在研究的一些新功能難以實現。</li>\n</ul>\n<p>這則 <a href=\"https://github.com/facebook/react/issues/11527#issuecomment-360199710\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">GitHub 評論</a>以具體範例來深入探討。</p>\n<h3 id=\"should-i-use-a-state-management-library-like-redux-or-mobx\"><a href=\"#should-i-use-a-state-management-library-like-redux-or-mobx\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>我應該使用 Redux 或 MobX 之類的狀態管理函式庫嗎？ </h3>\n<p><a href=\"https://redux.js.org/faq/general#when-should-i-use-redux\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">看情況。</a></p>\n<p>在加入額外的函式庫前先來了解 React 是個好主意。因為你可以只用 React 就建立一個夠複雜的應用程式。</p>","frontmatter":{"title":"Component State","next":null,"prev":null},"fields":{"path":"content/docs/faq-state.md","slug":"docs/faq-state.html"}}},"pageContext":{"slug":"docs/faq-state.html"}},"staticQueryHashes":[]}