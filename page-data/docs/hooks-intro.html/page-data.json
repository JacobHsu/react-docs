{"componentChunkName":"component---src-templates-docs-js","path":"/docs/hooks-intro.html","result":{"data":{"markdownRemark":{"html":"<p><em>Hook</em> 是 React 16.8 中增加的新功能。它讓你不必寫 class 就能使用 state 以及其他 React 的功能。</p>\n<div class=\"gatsby-highlight has-highlighted-lines\" data-language=\"jsx\"><pre class=\"gatsby-code-jsx\"><code class=\"gatsby-code-jsx\"><span class=\"token keyword\">import</span> React<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> useState <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'react'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">Example</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n<span class=\"gatsby-highlight-code-line\">  <span class=\"token comment\">// 宣告一個新的 state 變數，我們稱作為「\b\bcount」。</span></span><span class=\"gatsby-highlight-code-line\">  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>count<span class=\"token punctuation\">,</span> setCount<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\"></span>\n<span class=\"token plain-text\">      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>p</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">You clicked </span><span class=\"token punctuation\">{</span>count<span class=\"token punctuation\">}</span><span class=\"token plain-text\"> times</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>p</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\"></span>\n<span class=\"token plain-text\">      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span> <span class=\"token attr-name\">onClick</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">setCount</span><span class=\"token punctuation\">(</span>count <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\"></span>\n<span class=\"token plain-text\">        Click me</span>\n<span class=\"token plain-text\">      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\"></span>\n<span class=\"token plain-text\">    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>這個新 function <code class=\"gatsby-code-text\">useState</code> 將會是我們學習的第一個「Hook」，不過這只是一個初窺的範例。如果這現在看起來並不合理，請別擔心！</p>\n<p><strong>你可以開始<a href=\"/docs/hooks-overview.html\">在下一頁</a>學習 Hook。</strong>在這一頁，我們將會繼續解釋為什麼要把 Hook 加到 React 以及他們如何幫助你寫出好的應用程式。</p>\n<blockquote>\n<p>注意</p>\n<p>React 16.8.0 是第一個支援 Hook 的版本。在升級時，記得不要忘記升級所有的套件包括 React DOM。\nReact Native 則是從 <a href=\"hhttps://reactnative.dev/blog/2019/03/12/releasing-react-native-059\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">0.59 的版本開始</a>支援 Hook。</p>\n</blockquote>\n<h2 id=\"video-introduction\"><a href=\"#video-introduction\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>介紹影片 </h2>\n<p>在 React Conf 2018，Sophie Alpert 和 Dan Abramov 介紹了 Hook，接著 Ryan Florence 展示了如何用它們來重構應用程式。在這裡觀看影片：</p>\n<br>\n<div class=\"gatsby-resp-iframe-wrapper\" style=\"padding-bottom: 56.30769230769231%; position: relative; height: 0; overflow: hidden; \" > <iframe src=\"//www.youtube.com/embed/dpw9EHDh2bM\" frameborder=\"0\" allowfullscreen style=\" position: absolute; top: 0; left: 0; width: 100%; height: 100%; \"></iframe> </div>\n<h2 id=\"no-breaking-changes\"><a href=\"#no-breaking-changes\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>沒有 Breaking Change </h2>\n<p>在我們繼續之前，請注意 Hook 是：</p>\n<ul>\n<li><strong>完全自由選擇使用。</strong>你可以在幾個 component 中試用 Hook 而不用重寫任何既有的程式碼。不過如果你不想要，並不需要現在學習或使用 Hook。</li>\n<li><strong>100% 向下相容。</strong>Hook 沒有任何 breaking change。</li>\n<li><strong>現在即可使用。</strong>隨著 v16.8.0 發佈，現在即可使用 Hook。</li>\n</ul>\n<p><strong>目前沒有計畫要從 React 移除 class。</strong> 你可以在這個頁面<a href=\"#gradual-adoption-strategy\">下面的章節</a>閱讀更多跟逐步採用 Hook 有關的內容。</p>\n<p><strong>Hook 不會取代你對 React 概念的了解。</strong>相反的，Hook 是對你已經熟悉的 React 概念：props、state、context、refs 以及 lifecycle，提供了一個更直接的 API。正如我們稍後將展示的那樣，Hook 還提供了一種新的強大方式來組合他們。</p>\n<p><strong>如果你只是想要開始學習 Hook，可以自由地<a href=\"/docs/hooks-overview.html\">直接跳到下一頁！</a></strong>你也可以繼續閱讀這一頁來了解更多關於我們為什麼要加入 Hook，以及我們如何在不重寫應用程式的情況下開始使用它們。</p>\n<h2 id=\"motivation\"><a href=\"#motivation\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>動機 </h2>\n<p>Hook 解決了 React 中我們過去五年在編寫與維護數萬個 component 時所遇到的各種看似不相關的問題。無論你是在學習 React、每天使用它、還是更喜歡有著相似 component 模型的不同函式庫，你可能都會發現其中一些問題。</p>\n<h3 id=\"its-hard-to-reuse-stateful-logic-between-components\"><a href=\"#its-hard-to-reuse-stateful-logic-between-components\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>在 Component 之間重用 Stateful 的邏輯很困難 </h3>\n<p>React 沒有提供一個方法來把可重用的行為「附加」到一個 component 上 (舉例來說，把它連結到一個 store)。如果你已經使用 React 一段時間，你或許會熟悉像是 <a href=\"/docs/render-props.html\">render props</a> 以及 <a href=\"/docs/higher-order-components.html\">higher-order components</a>，這些試著解決這個問題的模式。但是這些模式要求你在使用它們時重新架構你的 component，這可能很麻煩，而且使程式碼更難追蹤。如果你在 React DevTools 上查看一個典型的 React 應用程式，你很可能會發現一個 component 的「包裝地獄」，被 provider、consumer、higher-order component、render props 以及其他抽象給層層圍繞。現在我們可以<a href=\"https://github.com/facebook/react-devtools/pull/503\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">在 DevTools 裡把它們過濾掉</a>，不過這指出了一個更根本的問題：React 需要一個更好的 primitive 來共用 stateful 邏輯。</p>\n<p>使用 Hook，你可以從 component 抽取 stateful 的邏輯，如此一來它就可以獨立地被測試和重複使用。<strong>Hook 讓你不需要改變 component 階層就能重用 stateful 的邏輯。</strong>這讓在許多 component 之間共用或是與社群共用 Hook 很簡單。</p>\n<p>我們將會在<a href=\"/docs/hooks-custom.html\">打造你自己的 Hook</a> 討論更多相關內容。</p>\n<h3 id=\"complex-components-become-hard-to-understand\"><a href=\"#complex-components-become-hard-to-understand\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>複雜的 component 變得很難理解 </h3>\n<p>我們時常必須維護那些一開始非常簡單，但後來變成充滿無法管理的 stateful 邏輯和 side effect 的 component。每個 lifecycle 方法常常包含不相關的邏輯混合在一起。舉例來說，component 可能會在 <code class=\"gatsby-code-text\">componentDidMount</code> 和 <code class=\"gatsby-code-text\">componentDidUpdate</code> 中抓取資料。但是，同一個 <code class=\"gatsby-code-text\">componentDidMount</code> 方法可能也包含一些設置 event listener 的不相關邏輯，並在 <code class=\"gatsby-code-text\">componentWillUnmount</code> 執行清除它們。會一起改變且彼此相關的程式碼被拆分，但完全不相關的程式碼卻放在同一個方法裡。這讓它很容易製造 bug 和不一致性。</p>\n<p>在許多情況下，因為到處都是 stateful 邏輯，不可能把這些 component 拆分成更小的 component。而測試它們也很困難。這是許多人偏愛把 React 跟一個獨立的 state 管理函式庫結合的其中一個理由。然而，這常常引入了太多的抽象，要求你在不同檔案間跳來跳去，而且讓重用 component 更加困難。</p>\n<p>為了解決這個問題，<strong>Hook 讓你把一個 component 拆分成更小的 function，這基於什麼部分是相關的（像是設置一個 subscription 或是抓取資料）</strong>，而不是強制基於 lifecycle 方法來分拆。你還可以選擇使用 reducer 來管理 component 的內部 state，使其更具可預測性。</p>\n<p>我們將會在<a href=\"/docs/hooks-effect.html#tip-use-multiple-effects-to-separate-concerns\">使用 Effect Hook</a> 討論更多相關內容。</p>\n<h3 id=\"classes-confuse-both-people-and-machines\"><a href=\"#classes-confuse-both-people-and-machines\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Class 讓人們和電腦同時感到困惑 </h3>\n<p>除了使重用、組織程式碼更加困難以外，我們發現 class 可能是學習 React 的一大障礙。你必須了解 <code class=\"gatsby-code-text\">this</code> 在 JavaScript 中如何運作，而這跟它在大部分程式語言中的運作方式非常不同。你必須記得 bind 那些 event handler。如果沒有不穩定的<a href=\"https://babeljs.io/docs/en/babel-plugin-transform-class-properties/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">語法提案</a>，撰寫的程式碼會非常繁瑣。人們可以很好的理解 props、state 以及從上而下的資料流，但仍然在跟 class 奮鬥。React 中的 function component 和 class component 之間的差異以及什麼時候該使用哪一個，甚至在經驗豐富的 React 開發者之間也存在意見分歧。</p>\n<p>此外，React 已經出現了大約五年，而我們想要確保它在下一個五年保持競爭力。如同 <a href=\"https://svelte.dev/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Svelte</a>、<a href=\"https://angular.io/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Angular</a>、<a href=\"https://glimmerjs.com/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Glimmer</a>，以及其他人所展示的，component 的<a href=\"https://en.wikipedia.org/wiki/Ahead-of-time_compilation\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">提前編譯</a>有很大的未來潛力。特別是如果它不侷限在模板上。最近，我們在實驗使用 <a href=\"https://prepack.io/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Prepack</a> 來做 <a href=\"https://github.com/facebook/react/issues/7323\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">component folding</a>，而我們已經看到大有可為的早期結果。然而，我們發現使用 class component 會鼓勵一些不是故意的模式，這會讓這些最佳化回到一條比較慢的路。Class 在現在的工具上也有不少問題。例如，class 沒有辦法很好的壓縮，而且它讓 hot reload 變得脆弱而且不可靠。我們想要提出一個可以讓程式碼更可能留在可最佳化的路徑上的 API。</p>\n<p>為了解決這些問題，<strong>Hook 讓你不需要 class 就能使用更多 React 的功能。</strong> 從概念上來看，React component 一直都更接近 function。Hook 擁抱 function，但沒有犧牲 React 的實際精神。Hook 提供取用 imperative 技術的辦法且不要求你學習複雜的 functional 或 reactive programming 技術。</p>\n<blockquote>\n<p>範例</p>\n<p><a href=\"/docs/hooks-overview.html\">Hook 總覽</a>是一個開始學習 Hook 的好地方。</p>\n</blockquote>\n<h2 id=\"gradual-adoption-strategy\"><a href=\"#gradual-adoption-strategy\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>逐步的採用策略 </h2>\n<blockquote>\n<p><strong>長話短說：目前沒有計畫要從 React 移除 class。</strong></p>\n</blockquote>\n<p>我們知道 React 的開發者們專注在交付產品，沒有時間仔細去看每一個被釋出的新 API。Hook 非常新，所以在考慮學習或採用它們之前，等待更多範例和教學可能會更好。</p>\n<p>我們也了解要添加一個新的 primitive 到 React 的標準非常高。我們已經準備了一個<a href=\"https://github.com/reactjs/rfcs/pull/68\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">詳盡的 RFC</a> 給好奇的讀者，它藉由更多細節深入探討動機，並針對特定的設計決策以及先關的既有技術提供額外的觀點。</p>\n<p><strong>至關重要的是，Hook 可以與既有的程式碼一起運作，因此你可以逐步採用它們。</strong> 不用急著轉換到 Hook。我們建議避免任何「巨大的改寫」，尤其是那些既有、複雜的 class component。要開始「從 Hook 的角度思考」需要一些思維上的轉變。根據我們的經驗，最好先在新的且重要性較低的 component 中練習使用 Hook，並確保團隊中的每個人都不會對它感到不舒服。在你嘗試了 Hook 之後，請自由地<a href=\"https://github.com/facebook/react/issues/new\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">給我們一些回饋</a>，不管是正面的還是負面的可以。</p>\n<p>我們有意讓 Hook 能涵蓋 class 所有既有的使用案例，但<strong>我們會在可見的未來繼續支援 class component。</strong>在 Facebook 裡，我們有數以萬計的 component 是用 class 寫的，而我們絕對沒有計劃要改寫它們。取而代之，我們開始在新的程式碼中使用 Hook 並讓它們跟 class 共存。</p>\n<h2 id=\"frequently-asked-questions\"><a href=\"#frequently-asked-questions\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>常見問題 </h2>\n<p>我們準備了一個 <a href=\"/docs/hooks-faq.html\">Hook 的常見問題頁面</a>來回答 Hook 最常見到的問題。</p>\n<h2 id=\"next-steps\"><a href=\"#next-steps\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>下一步 </h2>\n<p>看到這頁的最後面，你應該已經大致了解 Hook 正在解決什麼問題，不過許多細節你可能都還不大清楚。別擔心！<strong>讓我們馬上前往<a href=\"/docs/hooks-overview.html\">下一頁</a>，我們可以在那裡開始藉由範例學習 Hook。</strong></p>","frontmatter":{"title":"介紹 Hook","next":"hooks-overview.html","prev":null},"fields":{"path":"content/docs/hooks-intro.md","slug":"docs/hooks-intro.html"}}},"pageContext":{"slug":"docs/hooks-intro.html"}},"staticQueryHashes":[]}