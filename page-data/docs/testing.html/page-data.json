{"componentChunkName":"component---src-templates-docs-js","path":"/docs/testing.html","result":{"data":{"markdownRemark":{"html":"<p>你可以像測試其他 JavaScript 程式碼一樣來測試 React component。</p>\n<p>有幾種方式可以來測試 React component。大致上來說，它們可以分為兩種類型：</p>\n<ul>\n<li>在簡化的測試環境中 <strong>render component tree</strong> 並且 assert 它們的輸出。</li>\n<li>在真實瀏覽器環境中<strong>執行一個完整的應用程式</strong>（也稱為「end-to-end」測試）。</li>\n</ul>\n<p>本文件章節專注於第一種情況的測試策略。而完整的 end-to-end 測試對於預防重要的 workflow 不受影響非常有用，但此類測試不涉於 React component，因此不在本文件範圍內。</p>\n<h3 id=\"tradeoffs\"><a href=\"#tradeoffs\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>權衡 </h3>\n<p>當選擇測試工具時，值得考慮一些權衡：</p>\n<ul>\n<li><strong>迭代速度 vs 實際環境：</strong> 有一些工具在做出更改和查看結果之間提供了非常快速的回饋，但沒有精確的模擬瀏覽器的行為。其他工具可能使用真實的瀏覽器環境，但降低了迭代速度而且在持續集成伺服器上較脆弱。</li>\n<li><strong>需要多少 Mock：</strong>對於 component 的「單元」測試和「整合」測試之間的區別可能很模糊。如果你要測試一個表單，應該要測試表單內的按鈕嗎？或是 button component 應該有它自己的測試？重構按鈕會破壞表單的測試嗎？</li>\n</ul>\n<p>對於不同的團隊和產品會有不同的答案。</p>\n<h3 id=\"tools\"><a href=\"#tools\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>推薦工具 </h3>\n<p><strong><a href=\"https://facebook.github.io/jest/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Jest</a></strong> 是一個 JavaScript test runner 讓你可以透過 <a href=\"/react-docs/docs/testing-environments.html#mocking-a-rendering-surface\"><code class=\"gatsby-code-text\">jsdom</code></a> 存取 DOM。jsdom 只是一個很接近瀏覽器工作的方式，不過它以經足以測試 React component。Jest 有出色的迭代速度與像是 mock <a href=\"/react-docs/docs/testing-environments.html#mocking-modules\">module</a> 和 <a href=\"/react-docs/docs/testing-environments.html#mocking-timers\">timer</a> 的強大功能，因此你可以有更多的方式來控制你的程式碼執行。</p>\n<p><strong><a href=\"https://testing-library.com/react\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">React Testing Library</a></strong> 是一系列的 helper 讓你可以測試 React component 而不需要依賴它們的實作細節。這個方法讓重構變的輕而易舉，也讓你朝著可訪問性的最佳實踐的方向而前進。雖然它沒有提供一種「shallow」render 它的 child component 的方式，透過像是 Jest test runner 的 <a href=\"/react-docs/docs/testing-recipes.html#mocking-modules\">mock</a> 可以讓你達到這個目的。</p>\n<h3 id=\"learn-more\"><a href=\"#learn-more\" aria-hidden class=\"anchor\"><svg aria-hidden=\"true\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>學習更多 </h3>\n<p>本章節分成以下兩頁：</p>\n<ul>\n<li><a href=\"/react-docs/docs/testing-recipes.html\">方法</a>：為 React component 撰寫測試時的常用模式。</li>\n<li><a href=\"/react-docs/docs/testing-environments.html\">環境</a>：為 React component 設定測試環境時應該考慮的事項。</li>\n</ul>","frontmatter":{"title":"測試概覽","next":"testing-recipes.html","prev":null},"fields":{"path":"content/docs/testing.md","slug":"docs/testing.html"}}},"pageContext":{"slug":"docs/testing.html"}},"staticQueryHashes":[]}